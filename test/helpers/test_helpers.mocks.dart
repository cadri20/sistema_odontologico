// Mocks generated by Mockito 5.4.2 from annotations
// in sistema_odontologico/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sistema_odontologico/model/consulta.dart' as _i4;
import 'package:sistema_odontologico/model/paciente.dart' as _i2;
import 'package:sistema_odontologico/model/tratamiento.dart' as _i3;
import 'package:sistema_odontologico/services/auth_service.dart' as _i12;
import 'package:sistema_odontologico/services/config_service.dart' as _i13;
import 'package:sistema_odontologico/services/consulta_service.dart' as _i11;
import 'package:sistema_odontologico/services/paciente_service.dart' as _i9;
import 'package:sistema_odontologico/services/tratamiento_service.dart' as _i10;
import 'package:stacked_services/stacked_services.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePaciente_0 extends _i1.SmartFake implements _i2.Paciente {
  _FakePaciente_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTratamiento_1 extends _i1.SmartFake implements _i3.Tratamiento {
  _FakeTratamiento_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTratamientoAndPaciente_2 extends _i1.SmartFake
    implements _i3.TratamientoAndPaciente {
  _FakeTratamientoAndPaciente_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConsulta_3 extends _i1.SmartFake implements _i4.Consulta {
  _FakeConsulta_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i5.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i6.GlobalKey<_i6.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i6.GlobalKey<_i6.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i5.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<T?>? navigateWithTransition<T>(
    _i6.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i6.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i5.Transition? transitionClass,
    _i5.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? replaceWithTransition<T>(
    _i6.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i6.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i5.Transition? transitionClass,
    _i5.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void popUntil(
    _i6.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i6.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? navigateToView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i6.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i5.Transition? transition,
    _i5.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i6.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? clearStackAndShowView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? clearTillFirstAndShowView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
  @override
  _i7.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i6.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i5.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i5.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i5.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i7.Future<_i5.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i5.SheetResponse<dynamic>?>.value(),
      ) as _i7.Future<_i5.SheetResponse<dynamic>?>);
  @override
  _i7.Future<_i5.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i7.Future<_i5.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i5.SheetResponse<T>?>.value(),
      ) as _i7.Future<_i5.SheetResponse<T>?>);
  @override
  void completeSheet(_i5.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i5.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i5.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i6.Widget Function(
      _i6.BuildContext,
      _i5.DialogRequest<dynamic>,
      dynamic Function(_i5.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i5.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i8.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i8.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i5.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i5.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i5.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i5.DialogResponse<dynamic>?>);
  @override
  _i7.Future<_i5.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i7.Future<_i5.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i5.DialogResponse<T>?>.value(),
      ) as _i7.Future<_i5.DialogResponse<T>?>);
  @override
  _i7.Future<_i5.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i8.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i8.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i5.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i5.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i5.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i5.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i5.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PacienteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacienteService extends _i1.Mock implements _i9.PacienteService {
  @override
  _i7.Future<List<_i2.Paciente>> getPacientes() => (super.noSuchMethod(
        Invocation.method(
          #getPacientes,
          [],
        ),
        returnValue: _i7.Future<List<_i2.Paciente>>.value(<_i2.Paciente>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.Paciente>>.value(<_i2.Paciente>[]),
      ) as _i7.Future<List<_i2.Paciente>>);
  @override
  _i7.Future<_i2.Paciente> getPaciente(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPaciente,
          [id],
        ),
        returnValue: _i7.Future<_i2.Paciente>.value(_FakePaciente_0(
          this,
          Invocation.method(
            #getPaciente,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Paciente>.value(_FakePaciente_0(
          this,
          Invocation.method(
            #getPaciente,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Paciente>);
  @override
  _i7.Future<void> createPaciente(_i2.Paciente? paciente) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPaciente,
          [paciente],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> updatePaciente(_i2.Paciente? paciente) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePaciente,
          [paciente],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> deletePaciente(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePaciente,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i2.Paciente>> searchPacientes(String? nombre) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPacientes,
          [nombre],
        ),
        returnValue: _i7.Future<List<_i2.Paciente>>.value(<_i2.Paciente>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.Paciente>>.value(<_i2.Paciente>[]),
      ) as _i7.Future<List<_i2.Paciente>>);
}

/// A class which mocks [TratamientoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTratamientoService extends _i1.Mock
    implements _i10.TratamientoService {
  @override
  _i7.Future<List<_i3.Tratamiento>> getTratamientos() => (super.noSuchMethod(
        Invocation.method(
          #getTratamientos,
          [],
        ),
        returnValue:
            _i7.Future<List<_i3.Tratamiento>>.value(<_i3.Tratamiento>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i3.Tratamiento>>.value(<_i3.Tratamiento>[]),
      ) as _i7.Future<List<_i3.Tratamiento>>);
  @override
  _i7.Future<void> createTratamiento(_i3.Tratamiento? tratamiento) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTratamiento,
          [tratamiento],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> updateTratamiento(_i3.Tratamiento? tratamiento) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTratamiento,
          [tratamiento],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteTratamiento(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTratamiento,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<_i3.Tratamiento> getTratamiento(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTratamiento,
          [id],
        ),
        returnValue: _i7.Future<_i3.Tratamiento>.value(_FakeTratamiento_1(
          this,
          Invocation.method(
            #getTratamiento,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Tratamiento>.value(_FakeTratamiento_1(
          this,
          Invocation.method(
            #getTratamiento,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.Tratamiento>);
  @override
  _i7.Future<List<_i3.TratamientoAndPaciente>> getTratamientosAndPacientes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTratamientosAndPacientes,
          [],
        ),
        returnValue: _i7.Future<List<_i3.TratamientoAndPaciente>>.value(
            <_i3.TratamientoAndPaciente>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i3.TratamientoAndPaciente>>.value(
                <_i3.TratamientoAndPaciente>[]),
      ) as _i7.Future<List<_i3.TratamientoAndPaciente>>);
  @override
  _i7.Future<_i3.TratamientoAndPaciente> getTratamientoAndPaciente(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTratamientoAndPaciente,
          [id],
        ),
        returnValue: _i7.Future<_i3.TratamientoAndPaciente>.value(
            _FakeTratamientoAndPaciente_2(
          this,
          Invocation.method(
            #getTratamientoAndPaciente,
            [id],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.TratamientoAndPaciente>.value(
            _FakeTratamientoAndPaciente_2(
          this,
          Invocation.method(
            #getTratamientoAndPaciente,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.TratamientoAndPaciente>);
  @override
  _i7.Future<List<_i3.Tratamiento>> getTratamientosDePaciente(int? idPersona) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTratamientosDePaciente,
          [idPersona],
        ),
        returnValue:
            _i7.Future<List<_i3.Tratamiento>>.value(<_i3.Tratamiento>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i3.Tratamiento>>.value(<_i3.Tratamiento>[]),
      ) as _i7.Future<List<_i3.Tratamiento>>);
  @override
  _i7.Future<double> calcularSaldoDeTratamiento(_i3.Tratamiento? tratamiento) =>
      (super.noSuchMethod(
        Invocation.method(
          #calcularSaldoDeTratamiento,
          [tratamiento],
        ),
        returnValue: _i7.Future<double>.value(0.0),
        returnValueForMissingStub: _i7.Future<double>.value(0.0),
      ) as _i7.Future<double>);
}

/// A class which mocks [ConsultaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsultaService extends _i1.Mock implements _i11.ConsultaService {
  @override
  _i7.Future<List<_i4.Consulta>> getConsultas() => (super.noSuchMethod(
        Invocation.method(
          #getConsultas,
          [],
        ),
        returnValue: _i7.Future<List<_i4.Consulta>>.value(<_i4.Consulta>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i4.Consulta>>.value(<_i4.Consulta>[]),
      ) as _i7.Future<List<_i4.Consulta>>);
  @override
  _i7.Future<void> addConsulta(_i4.Consulta? consulta) => (super.noSuchMethod(
        Invocation.method(
          #addConsulta,
          [consulta],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> updateConsulta(_i4.Consulta? consulta) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateConsulta,
          [consulta],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteConsulta(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteConsulta,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<_i4.Consulta> getConsulta(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getConsulta,
          [id],
        ),
        returnValue: _i7.Future<_i4.Consulta>.value(_FakeConsulta_3(
          this,
          Invocation.method(
            #getConsulta,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Consulta>.value(_FakeConsulta_3(
          this,
          Invocation.method(
            #getConsulta,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Consulta>);
  @override
  _i7.Future<List<_i4.ConsultaAndTratamiento>>
      getConsultasAndPacientesAndTratamiento() => (super.noSuchMethod(
            Invocation.method(
              #getConsultasAndPacientesAndTratamiento,
              [],
            ),
            returnValue: _i7.Future<List<_i4.ConsultaAndTratamiento>>.value(
                <_i4.ConsultaAndTratamiento>[]),
            returnValueForMissingStub:
                _i7.Future<List<_i4.ConsultaAndTratamiento>>.value(
                    <_i4.ConsultaAndTratamiento>[]),
          ) as _i7.Future<List<_i4.ConsultaAndTratamiento>>);
  @override
  _i7.Future<List<_i4.ConsultaAndTratamiento>>
      getConsultasAndTratamientosDePaciente(int? idPaciente) =>
          (super.noSuchMethod(
            Invocation.method(
              #getConsultasAndTratamientosDePaciente,
              [idPaciente],
            ),
            returnValue: _i7.Future<List<_i4.ConsultaAndTratamiento>>.value(
                <_i4.ConsultaAndTratamiento>[]),
            returnValueForMissingStub:
                _i7.Future<List<_i4.ConsultaAndTratamiento>>.value(
                    <_i4.ConsultaAndTratamiento>[]),
          ) as _i7.Future<List<_i4.ConsultaAndTratamiento>>);
  @override
  _i7.Future<List<_i4.Consulta>> getConsultasDeTratamiento(
          int? idTratamiento) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConsultasDeTratamiento,
          [idTratamiento],
        ),
        returnValue: _i7.Future<List<_i4.Consulta>>.value(<_i4.Consulta>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i4.Consulta>>.value(<_i4.Consulta>[]),
      ) as _i7.Future<List<_i4.Consulta>>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i12.AuthService {
  @override
  String get jwtToken => (super.noSuchMethod(
        Invocation.getter(#jwtToken),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set jwtToken(String? value) => super.noSuchMethod(
        Invocation.setter(
          #jwtToken,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<bool> login(
    String? usuario,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            usuario,
            password,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i13.ConfigService {}
